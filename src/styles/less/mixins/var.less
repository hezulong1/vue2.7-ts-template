.set-css-var-value(@name, @value) {
  @n: ~'--@{name}';
  @{n}: @value;
}

// .var(color, color-primary)
// -> color: @color-primary;
// -> color: var(el-color-primary);
.var(@prop, @name) {
  @n: ~'--@{ns}-@{name}';
  @v: @@name;
  @{prop}: @v;
  @{prop}: ~'var(@{n}, @{name})';
}
// .var(color, color-primary, @color-danger)
// -> color: @color-danger;
// -> color: var(el-color-primary);
.var(@prop, @name, @value) {
  @n: ~'--@{ns}-@{name}';
  @{prop}: @value;
  @{prop}: ~'var(@{n}, @{value})';
}

.var-default(@prop, @name, @default) {
  @n: ~'--@{name}';
  @{prop}: ~'var(--@{n}, @{default})';
}


// .set-css-color-rgb(primary);
// -> --c-primary-rgb: 51, 176, 224;
// .set-css-color-rgb(primary, el);
// -> --el-color-primary-rgb: 64, 158, 255;
.set-css-color-rgb(@type, @rest...) {
  .rgb() when (@rest = el) {
    @prop: ~'--el-color-@{type}-rgb';
    @value: ~'el-color-@{type}';
    @{prop}: red(@@value), green(@@value), blue(@@value);
  }
  .rgb() when (default()) {
    @prop: ~'--c-@{type}-rgb';
    @value: ~'color-@{type}';
    @{prop}: red(@@value), green(@@value), blue(@@value);
  }
  .rgb();
}

// .res(@screen, @rules) {
//   .getScreen() when (@screen = md) {
//     @_screen: 1024px;
//   }

//   .getScreen() when (@screen = sm) {
//     @_screen: 768px;
//   }

//   .getScreen();

//   @media (min-width: @_screen)  {
//     @rules();
//   }
// }

// .set-type(prop, primary)
// -> prop: @color-primary;
// -> prop: var(--el-color-primary);

// .var(@prop, @value)
// -> @prop: @value



// .set-type-rgba(color, primary, 0.8);
// -> color: rgba(var(--c-primary-rgb), 0.8);
// .set-type-rgba(color, primary, 0.8, el);
// -> color: rgba(var(--el-color-primary-rgb), 0.8);
.set-type-rgba(@attribute, @type, @alpha: 1, @rest...) {
  .rgba() when (@rest = el) {
    @{attribute}: ~'rgba(var(--el-color-@{type}-rgb), @{alpha})';
  }
  .rgba() when (default()) {
    @{attribute}: ~'rgba(var(--c-@{type}-rgb), @{alpha})';
  }
  .rgba();
}
